/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package az.hotel.ms.gui;

import az.hotel.ms.dao.BookingDao;
import az.hotel.ms.dao.ClientDao;
import az.hotel.ms.dao.CleaningDao;
import az.hotel.ms.dao.StatusDao;
import az.hotel.ms.dao.RoomTypeDao;
import az.hotel.ms.dao.EmployeeDao;
import az.hotel.ms.dao.ExpenseDao;
import az.hotel.ms.dao.MenuDao;
import az.hotel.ms.dao.OrdersDao;
import az.hotel.ms.dao.PaymentDao;
import az.hotel.ms.dao.PaymentOptDao;
import az.hotel.ms.dao.PositionsDao;
import az.hotel.ms.dao.ReserveDao;
import az.hotel.ms.dao.RoomDao;
import az.hotel.ms.model.Booking;
import az.hotel.ms.model.Client;
import az.hotel.ms.model.Employee;
import az.hotel.ms.model.Expense;
import az.hotel.ms.model.LoginUser;
import az.hotel.ms.model.Orders;
import az.hotel.ms.model.Reservation;
import az.hotel.ms.model.Room;
import az.hotel.ms.model.Payment;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class MainFrame extends javax.swing.JFrame {

    private ClientDao clientDao;
    private EmployeeDao employeeDao;
    private ExpenseDao expenseDao;
    private RoomDao roomDao;
    private BookingDao bookingDao;
    private ReserveDao reserveDao;
    private OrdersDao ordersDao;
    private PaymentDao paymentDao;
    private PositionsDao positionsDao;
    private MenuDao menuDao;
    private StatusDao statusDao;
    private CleaningDao cleaningDao;
    private RoomTypeDao roomTypeDao;
    private PaymentOptDao paymentOptDao;
    private String globBtnName = "";
    private LoginUser loginUser;

    MainFrame(ClientDao clientDao, EmployeeDao employeeDao, ExpenseDao expenseDao, RoomDao roomDao, BookingDao bookingDao, ReserveDao reserveDao, OrdersDao ordersDao, PaymentDao paymentDao, PaymentOptDao paymentOptDao, PositionsDao positionsDao, MenuDao menuDao, StatusDao statusDao, CleaningDao cleaningDao, RoomTypeDao roomTypeDao, LoginUser loginUser) {
        initComponents();
        this.clientDao = clientDao;
        this.employeeDao = employeeDao;
        this.expenseDao = expenseDao;
        this.roomDao = roomDao;
        this.bookingDao = bookingDao;
        this.reserveDao = reserveDao;
        this.ordersDao = ordersDao;
        this.paymentDao = paymentDao;
        this.positionsDao = positionsDao;
        this.menuDao = menuDao;
        this.cleaningDao = cleaningDao;
        this.statusDao = statusDao;
        this.roomTypeDao = roomTypeDao;
        this.loginUser = loginUser;
        jLabel2.setText(loginUser.getName() + " " + loginUser.getSurname());
        this.paymentOptDao = paymentOptDao;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bookBtn = new javax.swing.JButton();
        roomBtn = new javax.swing.JButton();
        clientDataBtn = new javax.swing.JButton();
        ordersBtn = new javax.swing.JButton();
        expenseBtn = new javax.swing.JButton();
        employeBtn = new javax.swing.JButton();
        paymentBtn = new javax.swing.JButton();
        reservBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        editBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        keyWordTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 102, 0));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        bookBtn.setText("Booking Data");
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        roomBtn.setText("Room Data");
        roomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomBtnActionPerformed(evt);
            }
        });

        clientDataBtn.setText("Client Data");
        clientDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientDataBtnActionPerformed(evt);
            }
        });

        ordersBtn.setText("Orders Data");
        ordersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersBtnActionPerformed(evt);
            }
        });

        expenseBtn.setText("Expense Data");
        expenseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseBtnActionPerformed(evt);
            }
        });

        employeBtn.setText("Employee Data");
        employeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeBtnActionPerformed(evt);
            }
        });

        paymentBtn.setText("Payment Data");
        paymentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentBtnActionPerformed(evt);
            }
        });

        reservBtn.setText("Reservation Data");
        reservBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roomBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .addComponent(reservBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .addComponent(paymentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .addComponent(expenseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
            .addComponent(ordersBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(employeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bookBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(clientDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(clientDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(employeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(expenseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(ordersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(paymentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(reservBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(roomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 102, 0));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        editBtn.setBackground(new java.awt.Color(255, 102, 102));
        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        keyWordTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyWordTxtActionPerformed(evt);
            }
        });
        keyWordTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyWordTxtKeyReleased(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        logoutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/hotel/ms/icons/unnamed.png"))); // NOI18N
        logoutBtn.setMaximumSize(new java.awt.Dimension(645, 621));
        logoutBtn.setMinimumSize(new java.awt.Dimension(645, 621));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Welcome,");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244)
                .addComponent(keyWordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBtn)
                .addGap(152, 152, 152)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(keyWordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBtn)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        if (rowIndex != -1) {
            Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);
            switch (globBtnName) {
                case "client":
                    EditClientFrame editClientFrame = new EditClientFrame(clientDao, selectedId,this);
                    editClientFrame.setVisible(true);
                    break;
                case "employee":
                    EditEmployeeFrame editEmployeeFrame = new EditEmployeeFrame(employeeDao, positionsDao, selectedId,this);
                    editEmployeeFrame.setVisible(true);
                    break;
                case "expense":
                    EditExpenseFrame editExpenseFrame = new EditExpenseFrame(expenseDao, employeeDao, selectedId,this);
                    editExpenseFrame.setVisible(true);
                    break;
                case "room":
                    EditRoomFrame editRoomFrame = new EditRoomFrame(roomDao, roomTypeDao, statusDao, cleaningDao, selectedId,this);
                    editRoomFrame.setVisible(true);
                    break;
                case "booking":
                    EditBookingFrame editBookingFrame = new EditBookingFrame(bookingDao, clientDao, roomDao, selectedId,this);
                    editBookingFrame.setVisible(true);
                    break;
                case "reserve":
                    EditReserveFrame editReserveFrame = new EditReserveFrame(reserveDao, clientDao, roomDao, selectedId,this);
                    editReserveFrame.setVisible(true);
                    break;
                case "orders":
                    EditOrdersFrame editOrdersFrame = new EditOrdersFrame(ordersDao, menuDao, clientDao, roomDao, selectedId,this);
                    editOrdersFrame.setVisible(true);
                    break;
                case "payment":
                    EditPaymentFrame editPaymentFrame = new EditPaymentFrame(paymentDao, paymentOptDao, selectedId,this);
                    editPaymentFrame.setVisible(true);
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Please, select person!");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please, select menu!");
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void clientDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientDataBtnActionPerformed
        try {
            showClientData(clientDao.getClientList());
            globBtnName = "client";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_clientDataBtnActionPerformed

    private void employeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeBtnActionPerformed
        try {
            showEmployeeData(employeeDao.getEmployeeList());
            globBtnName = "employee";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_employeBtnActionPerformed

    private void expenseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseBtnActionPerformed

        try {
            showExpenseData(expenseDao.getExpenseList());
            globBtnName = "expense";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_expenseBtnActionPerformed

    private void roomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomBtnActionPerformed
        try {
            showRoomData(roomDao.getRoomList());
            globBtnName = "room";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_roomBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        try {
            showBookingData(bookingDao.getBookingList());
            globBtnName = "booking";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bookBtnActionPerformed

    private void reservBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservBtnActionPerformed
        try {
            showReserveData(reserveDao.getReservList());
            globBtnName = "reserve";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_reservBtnActionPerformed

    private void ordersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersBtnActionPerformed
        try {
            showOrdersData(ordersDao.getOrdersList());
            globBtnName = "orders";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ordersBtnActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        switch (globBtnName) {
            case "client":
                NewClientFrame newClientFrame = new NewClientFrame(clientDao,this);
                newClientFrame.setVisible(true);
                break;
            case "employee":
                NewEmployeeFrame newEmployeeFrame = new NewEmployeeFrame(employeeDao, positionsDao,this);
                newEmployeeFrame.setVisible(true);
                break;
            case "expense":
                NewExpenseFrame newExpenseFrame = new NewExpenseFrame(expenseDao, employeeDao,this);
                newExpenseFrame.setVisible(true);
                break;
            case "room":
                NewRoomFrame newRoomFrame = new NewRoomFrame(roomDao, roomTypeDao, statusDao, cleaningDao,this);
                newRoomFrame.setVisible(true);
                break;
            case "booking":
                NewBookingFrame newBookingFrame = new NewBookingFrame(bookingDao, roomDao, clientDao,this);
                newBookingFrame.setVisible(true);
                break;
            case "reserve":
                NewReservationFrame newReservationFrame = new NewReservationFrame(reserveDao, roomDao, clientDao,this);
                newReservationFrame.setVisible(true);
                break;
            case "orders":
                NewOrdersFrame newOrdersFrame = new NewOrdersFrame(ordersDao, menuDao, roomDao,this);
                newOrdersFrame.setVisible(true);
                break;
            case "payment":
                NewPaymentFrame newPaymentFrame = new NewPaymentFrame(paymentDao,paymentOptDao,bookingDao,clientDao,roomDao,this);
                newPaymentFrame.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Please, select menu!");

        }
    }//GEN-LAST:event_newBtnActionPerformed

    private void paymentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentBtnActionPerformed
        try {
            showPaymentData(paymentDao.getPaymentList());
            globBtnName = "payment";
            keyWordTxt.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_paymentBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

        int rowIndex = jTable1.getSelectedRow();
        try {
            if (rowIndex != -1) {
                Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);

                switch (globBtnName) {

                    case "client":
                        int isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Client", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            clientDao.deleteClient(selectedId);
                            JOptionPane.showMessageDialog(null, "Client has been successfully deleted!");
                            showClientData(clientDao.getClientList());
                        }
                        break;

                    case "employee":
                        int isCfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Employee", JOptionPane.YES_NO_OPTION);
                        if (isCfirmMessage == JOptionPane.YES_OPTION) {
                            employeeDao.deleteEmployee(selectedId);
                            JOptionPane.showMessageDialog(null, "Employee has been successfully deleted!");
                            showEmployeeData(employeeDao.getEmployeeList());
                        }
                        break;
                    case "expense":
                      int conF =   JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Expense", JOptionPane.YES_NO_OPTION);
                      if(conF == JOptionPane.YES_OPTION) {
                          expenseDao.deleteExpense(selectedId);
                          JOptionPane.showMessageDialog(null, "Expense has been successfully deleted!");
                           showExpenseData(expenseDao.getExpenseList());
                      }
                        
                        break;
                    case "room":
                        int isCfirMssage = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Room", JOptionPane.YES_NO_OPTION);
                        if (isCfirMssage == JOptionPane.YES_OPTION) {
                            roomDao.deleteRoom(selectedId);
                            JOptionPane.showMessageDialog(null, "Room has been successfully deleted!");
                            showRoomData(roomDao.getRoomList());
                        }
                        break;
                    case "booking":
                        int isCfirMssge = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Booking", JOptionPane.YES_NO_OPTION);
                        if (isCfirMssge == JOptionPane.YES_OPTION) {
                            bookingDao.deleteBooking(selectedId);
                            JOptionPane.showMessageDialog(null, "Booking has been successfully deleted!");
                            showBookingData(bookingDao.getBookingList());
                        }
                        break;
                    case "reserve":
                        int isCfrMssge = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete reserve", JOptionPane.YES_NO_OPTION);
                        if (isCfrMssge == JOptionPane.YES_OPTION) {
                            reserveDao.deleteReserve(selectedId);
                            JOptionPane.showMessageDialog(null, "Reservation has been successfully deleted!");
                            showReserveData(reserveDao.getReservList());
                        }
                        break;
                    case "orders":
                        int isCfrMsge = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete orders", JOptionPane.YES_NO_OPTION);
                        if (isCfrMsge == JOptionPane.YES_OPTION) {
                            ordersDao.deleteOrders(selectedId);
                            JOptionPane.showMessageDialog(null, "Orders has been successfully deleted!");
                            showOrdersData(ordersDao.getOrdersList());
                        }
                        break;
                    case "payment":
                        int isCofrMsge = JOptionPane.showConfirmDialog(null, "Are you sure? ", "Delete Payment", JOptionPane.YES_NO_OPTION);
                        if (isCofrMsge == JOptionPane.YES_OPTION) {
                            paymentDao.deletePayment(selectedId);
                            JOptionPane.showMessageDialog(null, "Payment has been successfully deleted!");
                            showPaymentData(paymentDao.getPaymentList());
                        }
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Please, select menu!");

                }
            } else {
                JOptionPane.showMessageDialog(null, "Please, select menu!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Problem! Option has not been successfully deleted!");
            ex.printStackTrace();
        }

    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        try {
            String keyWord = keyWordTxt.getText();
            switch (globBtnName) {
                case "client":
                    List<Client> clientList = clientDao.searchClientData(keyWord);
                    showClientData(clientList);
                    break;    
                case "employee":
                    List<Employee> employeeList = employeeDao.searchEmployeeData(keyWord);
                    showEmployeeData(employeeList);
                    break;
                case "expense":
                    List<Expense> expenseList = expenseDao.searchExpenseData(keyWord);
                    showExpenseData(expenseList);
                    break;
                case "room":
                    List<Room> roomList = roomDao.searchRoomData(keyWord);
                    showRoomData(roomList);
                    break;
                case "booking":
                    List<Booking> bookingList = bookingDao.searchBookingData(keyWord);
                    showBookingData(bookingList);
                    break;
                case "reserve":
                    List<Reservation> reservList = reserveDao.searchReservationData(keyWord);
                    showReserveData(reservList);
                    break;
                case "orders":
                    List<Orders> ordersList = ordersDao.searchOrdersData(keyWord);
                    showOrdersData(ordersList);
                    break;
                case "payment":
                    List<Payment> paymentList = paymentDao.searchPaymentData(keyWord);
                    showPaymentData(paymentList);
                    break;
                default:
                    
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true);
        //JOptionPane.showMessageDialog(null, "You logged out");
        this.dispose();
        JOptionPane.showMessageDialog(null, "You logged out");
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            editBtnActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void keyWordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyWordTxtActionPerformed
        
    }//GEN-LAST:event_keyWordTxtActionPerformed

    private void keyWordTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyWordTxtKeyReleased
        searchBtnActionPerformed(null);
    }//GEN-LAST:event_keyWordTxtKeyReleased

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookBtn;
    private javax.swing.JButton clientDataBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton employeBtn;
    private javax.swing.JButton expenseBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField keyWordTxt;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton ordersBtn;
    private javax.swing.JButton paymentBtn;
    private javax.swing.JButton reservBtn;
    private javax.swing.JButton roomBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables

    public void showClientData(List<Client> clientList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Phone");
            model.addColumn("Nationality");
            //List<Client> clientList = clientDao.getClientList();
            for (Client client : clientList) {

                Object[] data = new Object[]{
                    client.getID(), client.getName(), client.getSurname(), client.getGender(), client.getPhone(), client.getNationality()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void showEmployeeData(List<Employee> employeeList) {
        try {
            DefaultTableModel model = new DefaultTableModel();

            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Email");
            model.addColumn("Contact");
            model.addColumn("Position Name");
            //List<Employee> employeeList = employeeDao.getEmployeeList();
            for (Employee employee : employeeList) {

                Object[] data = new Object[]{
                    employee.getID(), employee.getName(), employee.getSurname(), employee.getGender(), employee.getEmail(), employee.getContact(), employee.getPosition().getPositionName()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void showExpenseData(List<Expense> expenseList) {
        try {

            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Employee Name");
            model.addColumn("Employee Surname");
            model.addColumn("Expense Amount");
            model.addColumn("Expense Type");
            model.addColumn("Expense Date");
            //List<Expense> expenseList = expenseDao.getExpenseList();
            for (Expense expense : expenseList) {

                Object[] data = new Object[]{
                    expense.getID(), expense.getEmployee().getName(), expense.getEmployee().getSurname(), expense.getExpenseAmount(), expense.getExpenseType(), expense.getExpenseDate()};
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void showRoomData(List<Room> roomList) {

        try {
            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Room Number");
            model.addColumn("Room type");
            model.addColumn("Type Description");
            model.addColumn("Room Status");
            model.addColumn("Cost");
            model.addColumn("Cleaning Condition");
            // List<Room> roomList = roomDao.getRoomList();
            for (Room room : roomList) {

                Object[] data;
                data = new Object[]{
                    room.getID(), room.getRoomNumber(), room.getRoomType().getRoomName(), room.getRoomType().getDesCription(), room.getStatus().getStatusName(), room.getCost(), room.getCleaning().getCleanCondition()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void showBookingData(List<Booking> bookingList) {
        try {
            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Client  Fullname");
            model.addColumn("Room Number");
            model.addColumn("Check In");
            model.addColumn("Check Out");
            //List<Booking> bookingList = bookingDao.getBookingList();
            for (Booking booking : bookingList) {

                Object[] data;
                data = new Object[]{
                    booking.getID(), booking.getClient().getName() + "  " + booking.getClient().getSurname(), booking.getRoom().getRoomNumber(), booking.getCheckIn(), booking.getCheckOut()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void showReserveData(List<Reservation> reserveList) {
        try {
            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Client  Fullname");
            model.addColumn("Room Number");
            model.addColumn("Reserve Date");
            //List<Reservation> reserveList = reserveDao.getReservList();
            for (Reservation reservation : reserveList) {

                Object[] data;
                data = new Object[]{
                    reservation.getID(), reservation.getClient().getName() + "  " + reservation.getClient().getSurname(), reservation.getRoom().getRoomNumber(), reservation.getReserveDate()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void showOrdersData(List<Orders> ordersList) {

        try {
            DefaultTableModel model = new DefaultTableModel();
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Menu Name");
            model.addColumn("Descriprion");
            //model.addColumn("Client Fullname");
            model.addColumn("Room Number");
            model.addColumn("Cost");
            //List<Orders> ordersList = ordersDao.getOrdersList();
            for (Orders orders : ordersList) {

                Object[] data;
                data = new Object[]{
                    orders.getID(), orders.getMenu().getMenuName(), orders.getMenu().getDesCripTion(), orders.getRoom().getRoomNumber(), orders.getCost()

                };
                model.addRow(data);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void showPaymentData(List<Payment> paymentList) {

        DefaultTableModel model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("№");
        model.addColumn("Client Fullname");
        //model.addColumn("Nationality");
        model.addColumn("Card Number");
        model.addColumn("Total Amount");
        model.addColumn("Payment Option");
        model.addColumn("Room Number");
        //= paymentDao.getPaymentList();
        for (Payment payment : paymentList) {

            Object[] data = new Object[]{
                payment.getID(), payment.getBooking().getClient().getName() + " " + payment.getBooking().getClient().getSurname(),
                payment.getCardNumber(), payment.getTotalAmount(),
                payment.getPaymentOpt().getPaymentName(), payment.getBooking().getRoom().getRoomNumber()

            };
            model.addRow(data);
        }
        model.fireTableDataChanged();
    }
}
